"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: Frontend —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
–í–µ—Ä—Å–∏—è: 1.0
"""
import os
import time
import yaml
import streamlit as st
from src.data.get_data import get_dataset, load_data
from src.plotting.charts import pair_plot, reg_heat_plot, kde_plot, bar_plot, box_plot
from src.train.training import start_training, last_metrics, diff_metrics, charts
from src.evaluate.evaluate import evaluate_input, evaluate_from_file
from src.train.cross_validation import cross_val

st.set_option("deprecation.showPyplotGlobalUse", False)
CONFIG_PATH = "../config/params.yml"


def main_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    st.image(
        "https://www.asiacryptotoday.com/wp-content/uploads/2023/01/Cian.jpg",
        width=600,
    )

    st.markdown("# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    st.title("MLOps project:  Apartment price prediction üè†üí∏")
    st.write(
        """
        –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å–µ–±–µ –ø–æ –¥—É—à–µ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, 
        –ø–ª–æ—â–∞–¥—å—é –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ‚Äì –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∏ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á.
        –ù—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ ‚Äì –∏–∑ –∫–∞–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∫–∞–∫ –¥–∞–≤–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–æ–º,
        –≤ –∫–∞–∫–æ–º –æ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º —ç—Ç–∞–∂–µ–π, –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏, –∫–æ–Ω–µ—á–Ω–æ, –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å.
         
        –ü–æ—ç—Ç–æ–º—É –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—É –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å 
        –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤."""
    )

    # name of the columns
    st.write(
        """
        –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∑—è–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: https://github.com/SergeyTselunov/Cian
        
        ### –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π 
        - –ù–∞–∑–≤–∞–Ω–∏–µ - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        - –ê–¥—Ä–µ—Å - –ê–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã
        - –ú–µ—Ç—Ä–æ - –ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ
        - –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ - –í—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ (–º–∏–Ω)
        - –¶–µ–Ω–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É (—Ä—É–±)
        - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä (—Ä—É–±) (–¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫)
        - –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å - –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤. –º–µ—Ç—Ä—ã)
        - –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å - –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤. –º–µ—Ç—Ä—ã)
        - –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ - –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–∫–≤. –º–µ—Ç—Ä—ã)
        - –≠—Ç–∞–∂ - –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞ –∏–∑ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –¥–æ–º–∞ 
        - –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ - –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞
        - –¢–∏–ø –∂–∏–ª—å—è - –í—Ç–æ—Ä–∏—á–∫–∞ –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞ 
        - –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ - –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º–µ—Ç—Ä—ã) 
        - –°–∞–Ω—É–∑–µ–ª - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ç–∏–ø —Å–∞–Ω—É–∑–ª–æ–≤
        - –í–∏–¥ –∏–∑ –æ–∫–æ–Ω - –í–∏–¥ –∏–∑ –æ–∫–æ–Ω
        - –†–µ–º–æ–Ω—Ç - –¢–∏–ø —Ä–∏–º–æ–Ω—Ç–∞
        - –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è - –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è
        - –ú—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥ - –ù–∞–ª–∏—á–∏–µ –º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥–∞ 
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤ –≤ –¥–æ–º–µ
        - –¢–∏–ø –¥–æ–º–∞ - –¢–∏–ø –¥–æ–º–∞
        - –¢–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π - –¢–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        - –ü–∞—Ä–∫–æ–≤–∫–∞ - –í–∏–¥ –ø–∞—Ä–∫–æ–≤–∫–∏
        - –ü–æ–¥—ä–µ–∑–¥—ã - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—ä–µ–∑–¥–æ–≤
        - –û—Ç–æ–ø–ª–µ–Ω–∏–µ - –¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        - –ê–≤–∞—Ä–∏–π–Ω–æ—Å—Ç—å - –ê–≤–∞—Ä–∏–π–Ω–æ—Å—Ç—å
        - –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ - –ù–∞–ª–∏—á–∏–µ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è
        - –ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ç–∏–ø –±–∞–ª–∫–æ–Ω–∞/–ª–æ–¥–∂–∏–∏
        - –ì–æ–¥ —Å–¥–∞—á–∏ - –ì–æ–¥ —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –¥–æ–º–µ
        - –î–æ–º - –°–¥–∞–Ω –∏–ª–∏ –Ω–µ—Ç
        - –û—Ç–¥–µ–ª–∫–∞ - –¢–∏–ø –æ—Ç–¥–µ–ª–∫–∏ 
        - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ.
        - –®–∏—Ä–æ—Ç–∞ –º–µ—Ç—Ä–æ, –¥–æ–ª–≥–æ—Ç–∞ –º–µ—Ç—Ä–æ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Ç—Ä–æ 
        - –®–∏—Ä–æ—Ç–∞ –¥–æ–º–∞, –¥–æ–ª–≥–æ –¥–æ–º–∞ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–º–∞ 
        - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ - –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ –∏ —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
        - –û–∫—Ä—É–≥ - –û–∫—Ä—É–≥ –ú–æ—Å–∫–≤—ã –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞."""
    )


def exploratory():
    """
    Exploratory data analysis
    """
    st.markdown("# –†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Öüìàüìä")

    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    # load and write dataset
    data = get_dataset(dataset_path=config["preprocessing"]["cian_full_path"])
    st.write(data.head())

    time.sleep(1)

    # # plotting with checkbox
    dist_metro_price = st.sidebar.checkbox("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç")
    dist_center_price = st.sidebar.checkbox("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç")
    floor_price = st.sidebar.checkbox("–≠—Ç–∞–∂ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç")
    parking_price = st.sidebar.checkbox("–ü–∞—Ä–∫–æ–≤–∫–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç")
    type_house_price = st.sidebar.checkbox("–¢–∏–ø –¥–æ–º–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç")
    #
    time.sleep(1)

    if dist_metro_price:
        st.pyplot(
            pair_plot(
                data=data,
                data_x="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ",
                data_y="–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
                title="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
            )
        )
        st.markdown(
            "–ú–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è, –Ω–æ —Å–æ–≤—Å–µ–º –Ω–µ–±–æ–ª—å—à–∞—è. –ó–∞—Ç–æ –º—ã –≤–∏–¥–∏–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –ø—Ä–æ–¥–∞—é—Ç—Å—è "
            "–±–ª–∏–∑–∫–æ –∫ –º–µ—Ç—Ä–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏–ª—å–Ω–æ —Ä–∞–∑–≤–∏—Ç –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω."
        )

    if dist_center_price:
        st.pyplot(
            reg_heat_plot(
                data=data,
                data_x="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞",
                data_y="–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
                title="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
            )
        )
        st.markdown(
            "–ú–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è. –¶–µ–Ω–∞ –∑–∞ 1 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É "
            "–≥–æ—Ä–æ–¥–∞ –≤—ã—à–µ."
        )
    if floor_price:
        fl_floor = data[
            (data["–≠—Ç–∞–∂"] == 1) | (data["–≠—Ç–∞–∂"] == data["–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –∑–¥–∞–Ω–∏—è"])
        ]["–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç"]
        other_floor = data.drop(fl_floor.index)[["–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç"]]
        st.pyplot(
            kde_plot(
                data_1=fl_floor,
                data_2=other_floor,
                title="–≠—Ç–∞–∂ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
                leg=["–ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂", "–û—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏"],
            )
        )
        st.markdown(
            "–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –ø–µ—Ä–≤–æ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–∂–µ –Ω–∏–∂–µ —á–µ–º —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –í –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ –ø–æ–¥–≤–∞–ª–∞ "
            "–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞ —Å —É–ª–∏—Ü—ã. –í –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ç–µ—á–µ–∫ –∫—Ä—ã—à–∏."
        )
    if parking_price:
        st.pyplot(
            bar_plot(
                data=data,
                data_x="–ü–∞—Ä–∫–æ–≤–∫–∞",
                data_y="–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
                title="–ü–∞—Ä–∫–æ–≤–∫–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
            )
        )
        st.markdown(
            "–ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ –¥–æ–º–∞—Ö —Å –ø–æ–¥–∑–µ–º–Ω–æ–π –∏–ª–∏ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –ø–∞—Ä–∫–æ–≤–∫–æ–π –¥–æ—Ä–æ–∂–µ —á–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ. –°–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, "
            "—á—Ç–æ –º–∞—à–∏–Ω–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–ø–ª–æ–º, –∑–∞–∫—Ä—ã—Ç–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏. –ò –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∏–º–æ–π —Ç—Ä–∞—Ç–∏—Ç—å "
            "–≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—Ä–µ–≤ –º–∞—à–∏–Ω—ã –∏ –æ—á–∏—Å—Ç–∫—É –æ—Ç —Å–Ω–µ–≥–∞ –≤ –∑–∏–º–Ω–µ–µ –≤—Ä–µ–º—è."
        )
    if type_house_price:
        st.pyplot(
            box_plot(
                data=data,
                data_x="–¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
                data_y="–¢–∏–ø –¥–æ–º–∞",
                title="–¢–∏–ø –¥–æ–º–∞ - –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç",
            )
        )
        st.markdown(
            "–ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã—Ö –¥–æ–º–∞—Ö –¥–æ—Ä–æ–∂–µ —á–µ–º –≤ –¥—Ä—É–≥–∏—Ö. –£ —ç—Ç–∏—Ö –¥–æ–º–æ–≤ —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Å—Ä–æ–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏, "
            "—Ö–æ—Ä–æ—à–∞—è –∑–≤—É–∫–æ-–∏–∑–æ–ª—è—Ü–∏—è, –∏ —ç—Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ–∑–≤–æ–¥–∏—Ç—å –¥–æ–º–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º."
        )


def run():
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –¥–ª—è Streamlit.
    –§–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
    """
    st.session_state.run = True


def tog():
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –¥–ª—è Streamlit.
    –§–ª–∞–≥ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
    """
    st.session_state.tog = True


def check():
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –¥–ª—è Streamlit.
    –§–ª–∞–≥ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    """
    st.session_state.check = True


def clear():
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –¥–ª—è Streamlit.
    –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    st.session_state.new_metrics = None
    st.session_state.cross = None
    st.session_state.overfit = None
    st.session_state.dis = False


def training():
    """
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
    """
    st.markdown("# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ LightGBMüîÅ")

    # get params
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ–∞–Ω—Å–∞
    if "run" not in st.session_state:
        st.session_state.run = False
        st.session_state.new_metrics = None
        st.session_state.tog = False
        st.session_state.check = False
        st.session_state.cross = None
        st.session_state.overfit = None
        st.session_state.dis = False

    if "old_metrics" not in st.session_state:
        st.session_state.old_metrics = last_metrics(config=config, visible=False)
    st.markdown("##")
    main_1 = st.empty()
    st.markdown("##")
    main_2 = st.empty()
    st.markdown("##")
    body = main_1.container()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    with body:
        col1, col2 = st.columns(2)
    body2 = main_2.container()

    with body2:
        col3, col4 = st.columns(2)

    metric = st.empty()
    metric_old = metric.container()
    metric_2 = st.empty()
    metric_new = metric_2.container()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with col2:
        on = st.toggle(
            "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö",
            disabled=st.session_state.dis,
        )
        if on:
            st.session_state.tog = True
        else:
            st.session_state.tog = False

    # –°–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    if st.session_state.tog:
        with metric_old:
            st.markdown("### –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
            last_metrics(config=config, visible=True)
        endpoint = config["endpoints"]["training_top"]
    else:
        endpoint = config["endpoints"]["train"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
    if not st.session_state.run and not st.session_state.check:
        if (
            st.session_state.new_metrics is not None
            or st.session_state.cross is not None
        ):
            col1.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑", on_click=run)
        else:
            col1.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", on_click=run)
        # –°–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    else:
        main_1.empty()
        st.markdown("##")
        main_2.empty()
        time.sleep(1)
    # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    if st.session_state.check:
        main_1.empty()
        main_2.empty()
        time.sleep(1)
        st.session_state.cross, st.session_state.overfit = cross_val(
            endpoint=config["endpoints"]["cross_training"]
        )
        st.session_state.check = False
        st.rerun()
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if st.session_state.run:
        st.session_state.old_metrics = last_metrics(config=config, visible=False)
        st.session_state.new_metrics = start_training(endpoint=endpoint)
        st.session_state.run = False
        st.session_state.dis = True
        st.rerun()
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è.
    if st.session_state.new_metrics is not None and st.session_state.cross is None:
        if not st.session_state.tog:
            with metric_new:
                st.write("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
                diff_metrics(
                    new_metrics=st.session_state.new_metrics,
                    old_metrics=st.session_state.old_metrics,
                )
        charts(config)
        with body2:
            st.success("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        col3.button("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏", on_click=check)
        col4.button("–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", on_click=clear)
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    elif st.session_state.cross is not None:
        with metric_new:
            st.write("##")
            st.write("### –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            diff_metrics(
                new_metrics=st.session_state.cross,
                old_metrics=st.session_state.new_metrics,
            )
        with body2:
            st.success("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        st.session_state.cross = None
        st.write("## –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:", st.session_state.overfit, "%")
        col4.button("–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", on_click=clear)


def prediction():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    st.markdown("# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–ºüí∏üèòÔ∏è")
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config["endpoints"]["prediction_input"]
    unique_data_path = config["train"]["unique_values_path"]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if os.path.exists(config["train"]["model_path"]):
        evaluate_input(unique_data_path=unique_data_path, endpoint=endpoint)
    else:
        st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")


def prediction_from_file():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    st.markdown("# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞üìÅ")
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config["endpoints"]["prediction_from_file"]

    upload_file = st.file_uploader(
        "", type=["csv", "xlsx"], accept_multiple_files=False
    )
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
    if upload_file:
        dataset_csv_df, files = load_data(data=upload_file, type_data="Test")
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if os.path.exists(config["train"]["model_path"]):
            evaluate_from_file(data=dataset_csv_df, endpoint=endpoint, files=files)
        else:
            st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")


def main():
    """
    –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
    """
    page_names_to_funcs = {
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": main_page,
        "–†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": exploratory,
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ LightGBM": training,
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º": prediction,
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞": prediction_from_file,
    }
    selected_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()


if __name__ == "__main__":
    main()
